@model Word
@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>Word Details</h4>
    <hr />

    <!-- Hidden field for word ID -->
    <input type="hidden" id="word-id" value="@Model.WordId" />

    <!-- Add anti-forgery token -->
    @Html.AntiForgeryToken()

    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Word_text)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Word_text)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Language)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Language)
        </dd>
        <dt class="col-sm-2">
            Part of speech
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Class)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Root)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Root.Word_text)
            @if (Model.RootID != null)
            {
                @if (!string.IsNullOrEmpty(Model.Root.Class))
                {
                    @("(" + Model.Root.Class + ")")
                }
            }
        </dd>



        <!-- GroupWord Section -->
        @if (Model.GroupWord != null)
        {
            <dt class="col-sm-2">
                Group
            </dt>
            <dd class="col-sm-10">
                @*                 <strong>@Model.GroupWord.Name</strong>
 *@                
                <a asp-controller="GroupWords" asp-action="Details" asp-route-id="@Model.GroupID">@Model.GroupWord.Name </a>
                @if (!string.IsNullOrEmpty(Model.GroupWord.Etymology))
                {
                    @(" (" + Model.GroupWord.Etymology + ")")
                }

                <h4>Group Explanations</h4>
                <ul>
                    @foreach (var groupExplanation in Model.GroupWord.GroupExplanations)
                    {
                        <li>@groupExplanation.Explanation (@groupExplanation.Language)</li>
                    }
                </ul>

                <h4>Words in this Group</h4>
                <a asp-action="AddMeaningToGroup"
                asp-controller="Words"
                asp-route-groupId="@Model.GroupID"
                asp-route-wordId="@Model.WordId"
                class="btn btn-primary">
                    Add Defintion to All Words in this Group
                </a>

                @if (ViewBag.GroupedWords != null && ViewBag.UniqueClasses != null)
                {
                    <div class="table-responsive">
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Language</th>
                                    @foreach (var wordClass in ViewBag.UniqueClasses)
                                    {
                                        <th>@wordClass</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var languageGroup in ViewBag.GroupedWords)
                                {
                                    <tr>
                                        <td><strong>@languageGroup.Key</strong></td>
                                        @foreach (var wordClass in ViewBag.UniqueClasses)
                                        {
                                            <td>
                                                @{
                                                    if (languageGroup.Value != null && 
                                                        languageGroup.Value.ContainsKey(wordClass) && 
                                                        languageGroup.Value[wordClass]?.Count > 0)
                                                        {
                                                            @foreach (var word in languageGroup.Value[wordClass])
                                                            {
                                                                <div>
                                                                    <a asp-controller="Words" 
                                                                       asp-action="Details" 
                                                                       asp-route-id="@word.WordId"
                                                                       class="text-decoration-none">
                                                                        @word.Word_text
                                                                    </a>
                                                                </div>
                                                            }
                                                        }
                                                }
                                            </td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </dd>


        }

        <!-- Display other word details -->
        <dt class="col-sm-2">
            Notes
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.notes)
        </dd>
        <dt class="col-sm-2">
            IPA
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.IPA)
        </dd>
        <dt class="col-sm-2">
            Pronunciation
        </dt>
        <dd class="col-sm-10">
            <!-- Current pronunciation display -->
            <div id="current-pronunciation">
                @if (!string.IsNullOrEmpty(Model.Pronunciation))
                {
                    <div class="current-audio">
                        <h5>Current Pronunciation:</h5>
                        @{
                            var fileId = "";
                            if (Model.Pronunciation.Contains("/file/d/"))
                            {
                                var match = System.Text.RegularExpressions.Regex.Match(Model.Pronunciation, @"/file/d/([a-zA-Z0-9-_]+)");
                                fileId = match.Success ? match.Groups[1].Value : "";
                            }
                            else if (Model.Pronunciation.Contains("id="))
                            {
                                var match = System.Text.RegularExpressions.Regex.Match(Model.Pronunciation, @"id=([a-zA-Z0-9-_]+)");
                                fileId = match.Success ? match.Groups[1].Value : "";
                            }

                            var directDownloadUrl = !string.IsNullOrEmpty(fileId) ? $"https://drive.google.com/uc?export=download&id={fileId}" : Model.Pronunciation;
                            var embedUrl = !string.IsNullOrEmpty(fileId) ? $"https://drive.google.com/file/d/{fileId}/preview" : Model.Pronunciation;

                            // Determine audio type
                            var audioType = "audio/webm"; // Default for modern browsers recording
                            if (Model.Pronunciation.Contains(".wav"))
                            {
                                audioType = "audio/wav";
                            }
                            else if (Model.Pronunciation.Contains(".mp3"))
                            {
                                audioType = "audio/mpeg";
                            }
                            else if (Model.Pronunciation.Contains(".ogg"))
                            {
                                audioType = "audio/ogg";
                            }
                        }

                        <!-- Debug info (remove after testing) -->
                        <div class="alert alert-info">
                            <small>Debug: @directDownloadUrl</small><br>
                            <small>Original: @Model.Pronunciation</small><br>
                            <small>Audio Type: @audioType</small>
                        </div>

                        <!-- Try direct download first -->
                        <audio controls class="mb-2" preload="metadata" controlsList="nodownload"
                               onerror="console.log('Audio error:', this.error); this.style.display='none';"
                               onloadeddata="console.log('Audio loaded successfully')">
                            <source src="@directDownloadUrl" type="@audioType">
                            Your browser does not support the audio element.
                        </audio>

                        <!-- Alternative: Try with different Google Drive URL format -->
                        <audio controls class="mb-2" preload="metadata" controlsList="nodownload"
                               onerror="console.log('Alternative audio error:', this.error); this.style.display='none';"
                               onloadeddata="console.log('Alternative audio loaded successfully')">
                            <source src="https://docs.google.com/uc?export=download&id=@fileId" type="@audioType">
                            Your browser does not support the audio element.
                        </audio>

                        <!-- Fallback: Google Drive embed -->
                        <div class="mt-2">
                            <small class="text-muted">If audio doesn't play above, try:</small><br>
                            <iframe src="@embedUrl" width="100%" height="60" frameborder="0"></iframe>
                        </div>

                        <br>
                        <small class="text-muted">
                            <a href="@directDownloadUrl" target="_blank" class="btn btn-sm btn-outline-secondary">
                                <i class="bi bi-download"></i> Download Audio
                            </a>
                        </small>
                        <br>
                        <button type="button" class="btn btn-danger btn-sm mt-2" onclick="deletePronunciation()">
                            <i class="bi bi-trash"></i> Delete Pronunciation
                        </button>
                    </div>
                }
                else
                {
                    <p class="text-muted">No pronunciation recorded</p>
                }
            </div>

            <!-- Recording controls -->
            <div class="mt-3">
                <h5>Record New Pronunciation:</h5>
                <div id="recorder-controls" style="display: none;">
                    <button type="button" id="record-btn" class="btn btn-primary" onclick="startRecording()">
                        <i class="bi bi-mic"></i> Start Recording
                    </button>
                    <button type="button" id="stop-btn" class="btn btn-danger" onclick="stopRecording()" style="display: none;">
                        <i class="bi bi-stop"></i> Stop Recording
                    </button>
                    <span id="recording-indicator" class="text-danger ms-2" style="display: none;">
                        <i class="bi bi-record-circle-fill"></i> Recording...
                    </span>
                </div>

                <!-- Preview area -->
                <div id="pronunciation-preview" class="mt-3"></div>

                <!-- Initialize button for browsers that need explicit permission -->
                <button type="button" class="btn btn-info btn-sm" onclick="initializeRecorder()">
                    <i class="bi bi-mic-fill"></i> Enable Microphone
                </button>
            </div>
        </dd>
        <dt class="col-sm-2">
            Is Derived Word
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.IsDrevWord)
        </dd>
    </dl>
</div>
<br />
<br />
<br />
<p>
    <a asp-controller="Words" asp-action="CreateWordExplanation" asp-route-wordId="@Model.WordId">Add Word Explanation</a>
</p>

<!-- List of Explanations -->
<h3>Explanations</h3>
<table class="table table-hover table-bordered">
    <thead>
        <tr>
            <th>Explanation</th>
            <th>Language</th>
            <th>Notes</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var explanation in Model.WordExplanations)
        {
            <tr>
                <td>@explanation.Explanation</td>
                <td>@explanation.Language</td>
                <td>@explanation.Notes</td>
                <!-- Example of button changes in Word Explanations section -->
                <td>
                    <div class="btn-group">
                        <a asp-controller="Words" asp-action="EditWordExplanation" asp-route-id="@explanation.ID" 
                           class="btn btn-outline-primary btn-sm" title="Edit">
                            <i class="bi bi-pencil-square"></i>
                        </a>
                        <a asp-controller="Words" asp-action="DeleteWordExplanation" asp-route-id="@explanation.ID" 
                           class="btn btn-outline-danger btn-sm" title="Delete">
                            <i class="bi bi-trash"></i>
                        </a>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>




<h4 style="display:inline;">Definitions</h4>
<a asp-action="CreateMeaning" asp-route-wordId="@Model.WordId" class="btn btn-primary">Add Definition</a>
<a asp-action="SelectFromMeaning" asp-route-wordId="@Model.WordId" class="btn btn-secondary">Select from existing Definitions</a>
<br /><br />

<!-- Tab Navigation -->
<ul class="nav nav-tabs" id="meaningTabs" role="tablist">
    @{
        var tabIndex = 1;
    }
    @foreach (var word_meaning in Model.WordMeanings)
    {
        <li class="nav-item" role="presentation">
            <button class="nav-link @(tabIndex == 1 ? "active" : "")" 
                    id="meaning-tab-@tabIndex" 
                    data-bs-toggle="tab" 
                    data-bs-target="#meaning-content-@tabIndex" 
                    type="button" 
                    role="tab">
                Definition @tabIndex
            </button>
        </li>
        tabIndex++;
    }
</ul>

<!-- Tab Content -->
<div class="tab-content" id="meaningTabsContent">
    @{
        tabIndex = 1;
    }
    @foreach (var word_meaning in Model.WordMeanings)
    {
        <div class="tab-pane fade @(tabIndex == 1 ? "show active" : "")" 
             id="meaning-content-@tabIndex" 
             role="tabpanel">
            
            <!-- Definition Section -->
            <div class="card mt-3">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Definition</h5>
                    <!-- Add the Remove Definition button here -->
                    <form asp-action="DeleteWM" method="post" style="display:inline;" onsubmit="return confirm('Are you sure you want to remove this definition from this word? This will not delete the definition itself, only remove it from this word.');">
    @Html.AntiForgeryToken()
    <input type="hidden" name="id" value="@word_meaning.ID" />
    <input type="hidden" name="wordId" value="@Model.WordId" />
    <button type="submit" class="btn btn-outline-warning btn-sm" title="Remove this definition from this word">
        <i class="bi bi-unlink"></i> Remove Definition
    </button>
</form>
                </div>
                <div class="card-body">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Language</th>
                                <th>Definition</th>
                                <th>Notes</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>@word_meaning.Meaning.Language</td>
                                <td>@word_meaning.Meaning.MeaningText</td>
                                <td>@word_meaning.Meaning.Notes</td>
                                <td>
                                    <a asp-action="AddChildMeaning" 
                                       asp-route-parentMeaningId="@word_meaning.MeaningID" 
                                       asp-route-wordId="@Model.WordId" 
                                       class="btn btn-primary btn-sm">Add Translation</a>
                                    <a href="@Url.Action("Edit", "Meanings", new { id = @word_meaning.MeaningID})" 
                                       class="btn btn-primary btn-sm">Edit</a>
                                </td>
                            </tr>
                            @if (word_meaning.Meaning.ChildMeanings != null)
                            {
                                @foreach (var childMeaning in word_meaning.Meaning.ChildMeanings)
                                {
                                    <tr>
                                        <td>@childMeaning.Language</td>
                                        <td>@childMeaning.MeaningText</td>
                                        <td>@childMeaning.Notes</td>
                                        <td>
                                            <div class="btn-group">
                                                <div class="btn-group">
                                                    <a href="@Url.Action("Edit", "Meanings", new { id = @childMeaning.ID })"
                                                       class="btn btn-outline-primary btn-sm" title="Edit">
                                                        <i class="bi bi-pencil-square"></i>
                                                    </a>
                                                    <form asp-action="DeleteChildMeaning" method="post" style="display:inline;">
                                                        @Html.AntiForgeryToken()
                                                        <input type="hidden" name="id" value="@childMeaning.ID" />
                                                        <input type="hidden" name="wordId" value="@Model.WordId" />
                                                        <button type="submit" class="btn btn-outline-danger btn-sm"
                                                                onclick="return confirm('Are you sure you want to delete this meaning?');"
                                                                title="Delete">
                                                            <i class="bi bi-trash"></i>
                                                        </button>
                                                    </form>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Examples Section -->
            <div class="card mt-3">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Examples</h5>
                    <a asp-action="CreateExample"
                       asp-route-wordMeaningId="@word_meaning.ID"
                       asp-route-wordId="@Model.WordId"
                       asp-route-language="@word_meaning.Word.Language"
                       class="btn btn-primary btn-sm">Add Example</a>
                </div>
                <div class="card-body">
                    @if (word_meaning.Examples != null && word_meaning.Examples.Any())
                    {
                        @foreach (var example in word_meaning.Examples)
                        {
                            <div class="example-block mb-3">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th>Example</th>
                                            <th>Reference</th>
                                            <th>Pronunciation</th>
                                            <th>Notes</th>
                                            <th>Language</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <!-- Main example -->
                                        <tr>
                                            <td>@example.ExampleText</td>
                                            <td>@example.Reference</td>
                                            <td>@example.Pronunciation</td>
                                            <td>@example.Notes</td>
                                            <td>@example.Language</td>
                                            <td>
                                                <div class="btn-group">
                                                    <a asp-action="CreateChildExample"
                                                       asp-route-parentExampleId="@example.ID"
                                                       asp-route-wordId="@Model.WordId"
                                                       class="btn btn-primary btn-sm">Add Translation</a>
                                                    @* <a asp-action="EditExample" 
                                                       asp-route-id="@example.ID" 
                                                       class="btn btn-primary btn-sm">Edit</a>
                                                    <form asp-action="DeleteExample" method="post" style="display:inline;">
                                                        <input type="hidden" name="id" value="@example.ID" />
                                                        <button type="submit" 
                                                                class="btn btn-danger btn-sm" 
                                                                onclick="return confirm('Are you sure?');">Delete</button>
                                                    </form> *@
                                                    <div class="btn-group">
                                                        <a asp-action="EditExample" asp-route-id="@example.ID"
                                                           class="btn btn-outline-primary btn-sm" title="Edit">
                                                            <i class="bi bi-pencil-square"></i>
                                                        </a>
                                                        <form asp-action="DeleteExample" method="post" style="display:inline;">
                                                            <input type="hidden" name="id" value="@example.ID" />
                                                            <button type="submit" class="btn btn-outline-danger btn-sm"
                                                                    onclick="return confirm('Are you sure?');" title="Delete">
                                                                <i class="bi bi-trash"></i>
                                                            </button>
                                                        </form>
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                        <!-- Child examples -->
                                        @if (example.ChildExamples != null)
                                        {
                                            @foreach (var childExample in example.ChildExamples)
                                            {
                                                <tr>
                                                    <td>@childExample.ExampleText</td>
                                                    <td>@childExample.Reference</td>
                                                    <td>@childExample.Pronunciation</td>
                                                    <td>@childExample.Notes</td>
                                                    <td>@childExample.Language</td>
                                                    <td>
                                                        <div class="btn-group">
                                                            <a asp-action="EditChildExample" 
                                                               asp-route-id="@childExample.ID" 
                                                               class="btn btn-primary btn-sm">Edit</a>
                                                            <form asp-action="DeleteExample" method="post" style="display:inline;">
                                                                <input type="hidden" name="id" value="@childExample.ID" />
                                                                <button type="submit" 
                                                                        class="btn btn-danger btn-sm" 
                                                                        onclick="return confirm('Are you sure?');">Delete</button>
                                                            </form>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    }
                </div>
            </div>

            <!-- Bible References Section -->
            <div class="card mt-3">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Bible References</h5>
                    <a asp-action="CreateBibleReference"
                       asp-route-wordMeaningId="@word_meaning.ID"
                       class="btn btn-primary btn-sm">Add Bible Reference</a>
                </div>
                <div class="card-body">
                    @if (word_meaning.WordMeaningBibles != null && word_meaning.WordMeaningBibles.Any())
                    {
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Text</th>
                                    <th>Reference</th>
                                    <th>Edition</th>
                                    <th>Language</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var wordMeaningBible in word_meaning.WordMeaningBibles)
                                {
                                    <tr>
                                        <td>@wordMeaningBible.Bible.Text</td>
                                        <td>@wordMeaningBible.Bible.Book @wordMeaningBible.Bible.Chapter:@wordMeaningBible.Bible.Verse</td>
                                        <td>@wordMeaningBible.Bible.Edition</td>
                                        <td>@wordMeaningBible.Bible.Language</td>
                                        <td>
                                            <div class="btn-group">
                                                <div class="btn-group">
                                                    <a asp-action="EditBibleReference" asp-route-id="@wordMeaningBible.ID"
                                                       class="btn btn-outline-primary btn-sm" title="Edit">
                                                        <i class="bi bi-pencil-square"></i>
                                                    </a>
                                                    <form asp-action="DeleteBibleReference" method="post" style="display:inline;">
                                                        <input type="hidden" name="id" value="@wordMeaningBible.ID" />
                                                        <button type="submit" class="btn btn-outline-danger btn-sm"
                                                                onclick="return confirm('Are you sure?');" title="Delete">
                                                            <i class="bi bi-trash"></i>
                                                        </button>
                                                    </form>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                    @if (ViewBag.RelatedBibleVerses != null && 
                                         ViewBag.RelatedBibleVerses.ContainsKey(wordMeaningBible.BibleID))
                                    {
                                        @foreach (var relatedBible in ViewBag.RelatedBibleVerses[wordMeaningBible.BibleID])
                                        {
                                            <tr class="table-secondary">
                                                <td>@relatedBible.Text</td>
                                                <td>@relatedBible.Book @relatedBible.Chapter:@relatedBible.Verse</td>
                                                <td>@relatedBible.Edition</td>
                                                <td>@relatedBible.Language</td>
                                                <td></td>
                                            </tr>
                                        }
                                    }
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>

            <!-- Related Words Section -->
            @if (word_meaning?.Meaning?.WordMeanings != null)
            {
                <div class="mt-4">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h3>Related Words by Language</h3>
                         <div class="btn-group">
        <a asp-action="CreateWordAddedToMeaning"
           asp-route-meaningId="@word_meaning.MeaningID"
           class="btn btn-primary btn-sm">
            <i class="bi bi-plus-circle"></i> Create New Word
        </a>
        <a asp-action="SelectWordForMeaning"
           asp-route-meaningId="@word_meaning.MeaningID"
           asp-route-currentWordId="@Model.WordId"
           class="btn btn-success btn-sm">
            <i class="bi bi-plus-circle"></i> Add Existing Word
        </a>
    </div>
                    </div>
                    @{
                        var groupedWords = word_meaning.Meaning.WordMeanings
                        .Where(w => w.WordID != Model.WordId) // Exclude current word
                        .GroupBy(w => w.Word.Language)
                        .OrderBy(g => g.Key);

                        // Create a helper function to get language display name
                        var languagesList = new List<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>
            {
            new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem { Value = "AR", Text = "Arabic" },
            new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem { Value = "FR", Text = "French" },
            new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem { Value = "EN", Text = "English" },
            new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem { Value = "RU", Text = "Russian" },
            new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem { Value = "DE", Text = "German" },
            new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem { Value = "IT", Text = "Italian" },
            new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem { Value = "HE", Text = "Hebrew" },
            new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem { Value = "GR", Text = "Greek" },
            new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem { Value = "ARC", Text = "Aramaic" },
            new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem { Value = "EG", Text = "Egyptian" },
            new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem { Value = "C-B", Text = "Coptic - B" },
            new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem { Value = "C-S", Text = "Coptic - S" },
            new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem { Value = "C-Sa", Text = "Coptic - Sa" },
            new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem { Value = "C-Sf", Text = "Coptic - Sf" },
            new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem { Value = "C-A", Text = "Coptic - A" },
            new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem { Value = "C-sA", Text = "Coptic - sA" },
            new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem { Value = "C-F", Text = "Coptic - F" },
            new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem { Value = "C-Fb", Text = "Coptic - Fb" },
            new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem { Value = "C-O", Text = "Coptic - O" },
            new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem { Value = "C-NH", Text = "Coptic - NH" }
            };

                        string GetLanguageDisplayName(string languageCode)
                        {
                            var language = languagesList.FirstOrDefault(l => l.Value == languageCode);
                            return language?.Text ?? languageCode;
                        }
                    }

                    @foreach (var languageGroup in groupedWords)
                    {
                        <div class="card mb-3">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h4>@GetLanguageDisplayName(languageGroup.Key)</h4>
                                <small class="text-muted">@languageGroup.Count() word(s)</small>
                            </div>
                            <div class="card-body">
                                <ul class="list-unstyled">
                                    @foreach (var relatedWord in languageGroup.OrderBy(w => w.Word.Word_text))
                                    {
                                        <li class="mb-2 d-flex justify-content-between align-items-center">
                                            <div>
                                                <a asp-action="Details" asp-route-id="@relatedWord.Word.WordId" class="btn btn-link">
                                                    @relatedWord.Word.Word_text
                                                </a>
                                                @if (!string.IsNullOrEmpty(relatedWord.Word.Class))
                                                {
                                                    <span class="text-muted">(@relatedWord.Word.Class)</span>
                                                }
                                            </div>
                                            <form asp-action="DeleteWM" method="post" style="display:inline;"
                                                  onsubmit="return confirm('Are you sure you want to remove this word from this meaning?');">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="id" value="@relatedWord.ID" />
                                                <input type="hidden" name="wordId" value="@Model.WordId" />
                                                <button type="submit" class="btn btn-outline-danger btn-sm" title="Remove this word from meaning">
                                                    <i class="bi bi-x-circle"></i>
                                                </button>
                                            </form>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                    }
                    @if (!groupedWords.Any())
                    {
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle"></i> No other words are currently linked to this meaning.
                        </div>
                    }
                </div>
            }
        </div>
        tabIndex++;
    }
</div>

<!-- ... rest of the existing code ... -->
@section Scripts {
    <script src="~/js/audio-recorder.js"></script>
    <script>
        function updatePronunciationDisplay(pronunciationUrl) {
            const container = document.getElementById('current-pronunciation');

            if (pronunciationUrl) {
                // Extract file ID from Google Drive URL
                let fileId = '';
                if (pronunciationUrl.includes('/file/d/')) {
                    const match = pronunciationUrl.match(/\/file\/d\/([a-zA-Z0-9-_]+)/);
                    fileId = match ? match[1] : '';
                } else if (pronunciationUrl.includes('id=')) {
                    const match = pronunciationUrl.match(/id=([a-zA-Z0-9-_]+)/);
                    fileId = match ? match[1] : '';
                }

                const directDownloadUrl = fileId ? `https://drive.google.com/uc?export=download&id=${fileId}` : pronunciationUrl;
                const embedUrl = fileId ? `https://drive.google.com/file/d/${fileId}/preview` : pronunciationUrl;

                // Determine audio type
                let audioType = 'audio/webm';
                if (pronunciationUrl.includes('.wav')) {
                    audioType = 'audio/wav';
                } else if (pronunciationUrl.includes('.mp3')) {
                    audioType = 'audio/mpeg';
                } else if (pronunciationUrl.includes('.ogg')) {
                    audioType = 'audio/ogg';
                }

                container.innerHTML = `
                    <div class="current-audio">
                        <h5>Current Pronunciation:</h5>

                        <!-- Debug info -->
                        <div class="alert alert-info">
                            <small>Debug: ${directDownloadUrl}</small><br>
                            <small>Original: ${pronunciationUrl}</small><br>
                            <small>Audio Type: ${audioType}</small>
                        </div>

                        <!-- Primary audio element -->
                        <audio controls class="mb-2" preload="metadata" controlsList="nodownload"
                               onerror="console.log('Audio error:', this.error); this.style.display='none';"
                               onloadeddata="console.log('Audio loaded successfully')">
                            <source src="${directDownloadUrl}" type="${audioType}">
                            Your browser does not support the audio element.
                        </audio>

                        <!-- Alternative audio element -->
                        <audio controls class="mb-2" preload="metadata" controlsList="nodownload"
                               onerror="console.log('Alternative audio error:', this.error); this.style.display='none';"
                               onloadeddata="console.log('Alternative audio loaded successfully')">
                            <source src="https://docs.google.com/uc?export=download&id=${fileId}" type="${audioType}">
                            Your browser does not support the audio element.
                        </audio>

                        <!-- Fallback: Google Drive embed -->
                        <div class="mt-2">
                            <small class="text-muted">If audio doesn't play above, try:</small><br>
                            <iframe src="${embedUrl}" width="100%" height="60" frameborder="0"></iframe>
                        </div>

                        <br>
                        <small class="text-muted">
                            <a href="${directDownloadUrl}" target="_blank" class="btn btn-sm btn-outline-secondary">
                                <i class="bi bi-download"></i> Download Audio
                            </a>
                        </small>
                        <br>
                        <button type="button" class="btn btn-danger btn-sm mt-2" onclick="deletePronunciation()">
                            <i class="bi bi-trash"></i> Delete Pronunciation
                        </button>
                    </div>
                `;
            } else {
                container.innerHTML = '<p class="text-muted">No pronunciation recorded</p>';
            }
        }

        function deletePronunciation() {
            if (!confirm('Are you sure you want to delete this pronunciation?')) {
                return;
            }

            const wordId = document.getElementById('word-id').value;
            console.log('WordId from input:', wordId); // Debug log

            if (!wordId || wordId === '0') {
                alert('Word ID not found');
                return;
            }

            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            const formData = new FormData();
            formData.append('wordId', wordId);
            formData.append('__RequestVerificationToken', token);

            fetch('/Words/DeletePronunciation', {
                method: 'POST',
                body: formData
            })
            .then(response => {
                console.log('Response status:', response.status);
                return response.json();
            })
            .then(data => {
                console.log('Response data:', data);
                if (data.success) {
                    // Update the display to show no pronunciation
                    updatePronunciationDisplay(null);
                    alert('Pronunciation deleted successfully');
                } else {
                    alert('Error deleting pronunciation: ' + (data.message || 'Unknown error'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error deleting pronunciation');
            });
        }
    </script>
}

