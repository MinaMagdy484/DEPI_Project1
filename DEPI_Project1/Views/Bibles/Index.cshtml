@model IEnumerable<Bible>

@{
    ViewData["Title"] = "Bible Search";
}

<div class="container-fluid">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="display-6 fw-bold text-primary">
                <i class="bi bi-book"></i> Bible Search
            </h1>
            <p class="text-muted">Search Bible verses by text content and apply filters</p>
        </div>
        <div>
            <a asp-action="Create" class="btn btn-primary btn-lg">
                <i class="bi bi-plus-circle"></i> Create New Bible Entry
            </a>
        </div>
    </div>

    <!-- Advanced Search Section -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-primary text-white">
            <h5 class="card-title mb-0">
                <i class="bi bi-search"></i> Advanced Bible Search
            </h5>
        </div>
        <div class="card-body">
            <form method="get">
                <!-- Text Search Row -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="search" class="form-label">Search Text:</label>
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="bi bi-search"></i>
                            </span>
                            <input name="search" value="@ViewBag.SearchText" 
                            class="form-control" 
                            placeholder="Search in Bible text..." />
                        </div>
                    </div>
                    <div class="col-md-3">
                        <label for="searchType" class="form-label">Search Type:</label>
                        <select name="searchType" class="form-select">
                            @if (ViewBag.SearchType == "exact")
                            {
                                <option value="exact" selected>Exact Match</option>
                            }
                            else
                            {
                                <option value="exact">Exact Match</option>
                            }

                            @if (ViewBag.SearchType == "contain")
                            {
                                <option value="contain" selected>Contains</option>
                            }
                            else
                            {
                                <option value="contain">Contains</option>
                            }

                            @if (ViewBag.SearchType == "start")
                            {
                                <option value="start" selected>Starts With</option>
                            }
                            else
                            {
                                <option value="start">Starts With</option>
                            }

                            @if (ViewBag.SearchType == "end")
                            {
                                <option value="end" selected>Ends With</option>
                            }
                            else
                            {
                                <option value="end">Ends With</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-3 d-flex align-items-end">
                        <button type="submit" class="btn btn-primary w-100">
                            <i class="bi bi-search"></i> Search
                        </button>
                    </div>
                </div>

                <hr />

                <!-- Filters Row -->
                <div class="row mb-3">
                    <div class="col-md-3">
                        <label for="bookNumber" class="form-label">Bible Book:</label>
                        <select name="bookNumber" id="bookSelect" class="form-select">
                            <option value="">-- All Books --</option>
                            @foreach (var book in ViewBag.BibleBooks as SelectList)
                            {
                                if (ViewBag.SelectedBook?.ToString() == book.Value)
                                {
                                    <option value="@book.Value" selected>@book.Text</option>
                                }
                                else
                                {
                                    <option value="@book.Value">@book.Text</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="chapter" class="form-label">Chapter:</label>
                        <select name="chapter" id="chapterSelect" class="form-select">
                            <option value="">-- All Chapters --</option>
                            @foreach (var chapter in ViewBag.Chapters as SelectList)
                            {
                                if (ViewBag.SelectedChapter?.ToString() == chapter.Value)
                                {
                                    <option value="@chapter.Value" selected>Chapter @chapter.Value</option>
                                }
                                else
                                {
                                    <option value="@chapter.Value">Chapter @chapter.Value</option>
                                }
                            }
                        </select>
                        <div id="chapterLoading" class="d-none">
                            <small class="text-muted">
                                <i class="spinner-border spinner-border-sm me-1" role="status"></i>
                                Loading chapters...
                            </small>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <label for="language" class="form-label">Language:</label>
                        <select name="language" id="languageSelect" class="form-select">
                            <option value="">-- All Languages --</option>
                            @foreach (var language in ViewBag.Languages as SelectList)
                            {
                                if (ViewBag.SelectedLanguage == language.Value)
                                {
                                    <option value="@language.Value" selected>@language.Text</option>
                                }
                                else
                                {
                                    <option value="@language.Value">@language.Text</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="edition" class="form-label">Edition:</label>
                        <select name="edition" id="editionSelect" class="form-select">
                            <option value="">-- All Editions --</option>
                            @foreach (var edition in ViewBag.Editions as SelectList)
                            {
                                if (ViewBag.SelectedEdition == edition.Value)
                                {
                                    <option value="@edition.Value" selected>@edition.Value</option>
                                }
                                else
                                {
                                    <option value="@edition.Value">@edition.Value</option>
                                }
                            }
                        </select>
                        <div id="editionLoading" class="d-none">
                            <small class="text-muted">
                                <i class="spinner-border spinner-border-sm me-1" role="status"></i>
                                Loading editions...
                            </small>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-12">
                        <div class="d-flex gap-2">
                            <button type="submit" class="btn btn-outline-primary">
                                <i class="bi bi-funnel"></i> Apply Filters
                            </button>
                            <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                                <i class="bi bi-x-circle"></i> Clear All
                            </a>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Results Summary -->
    @{
        var hasSearch = !string.IsNullOrEmpty(ViewBag.SearchText);
        var hasFilters = ViewBag.SelectedBook != null || ViewBag.SelectedChapter != null || 
                        !string.IsNullOrEmpty(ViewBag.SelectedLanguage) || !string.IsNullOrEmpty(ViewBag.SelectedEdition);
    }

    @if (hasSearch || hasFilters)
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle"></i>
            <strong>Search Results:</strong>
            @if (hasSearch)
            {
                <span>Text search for "<strong>@ViewBag.SearchText</strong>" using <strong>@ViewBag.SearchType</strong> match</span>
            }
            @if (hasFilters)
            {
                <br />
                <small>
                    Filters applied:
                    @if (ViewBag.SelectedBook != null)
                    {

                        var bookNames = ViewBag.BookNames as Dictionary<int, string>;
                        var selectedBookName = bookNames?.ContainsKey((int)ViewBag.SelectedBook) == true 
                            ? bookNames[(int)ViewBag.SelectedBook] 
                            : $"كتاب {ViewBag.SelectedBook}";

                        <span class="badge bg-secondary me-1">Book: @selectedBookName</span>
                    }
                    @if (ViewBag.SelectedChapter != null)
                    {
                        <span class="badge bg-secondary me-1">Chapter: @ViewBag.SelectedChapter</span>
                    }
                    @if (!string.IsNullOrEmpty(ViewBag.SelectedLanguage))
                    {
                        <span class="badge bg-secondary me-1">Language: @ViewBag.SelectedLanguage</span>
                    }
                    @if (!string.IsNullOrEmpty(ViewBag.SelectedEdition))
                    {
                        <span class="badge bg-secondary me-1">Edition: @ViewBag.SelectedEdition</span>
                    }
                </small>
            }
            <br />
            <small>Found <strong>@Model.Count()</strong> verse(s)</small>
        </div>
    }

    <!-- Results Display -->
    @if (Model.Any())
    {
        <!-- Stats Cards -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card bg-primary text-white stats-card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h4 class="fw-bold">@Model.Count()</h4>
                                <p class="mb-0">Total Verses</p>
                            </div>
                            <div class="align-self-center">
                                <i class="bi bi-book fs-1"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-success text-white stats-card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h4 class="fw-bold">@Model.Select(b => b.Book).Distinct().Count()</h4>
                                <p class="mb-0">Unique Books</p>
                            </div>
                            <div class="align-self-center">
                                <i class="bi bi-collection fs-1"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-info text-white stats-card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h4 class="fw-bold">@Model.Select(b => b.Language).Distinct().Count()</h4>
                                <p class="mb-0">Languages</p>
                            </div>
                            <div class="align-self-center">
                                <i class="bi bi-translate fs-1"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-warning text-white stats-card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h4 class="fw-bold">@Model.Select(b => b.Edition).Distinct().Count()</h4>
                                <p class="mb-0">Editions</p>
                            </div>
                            <div class="align-self-center">
                                <i class="bi bi-journal fs-1"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Results Table -->
        <div class="card shadow-sm">
            <div class="card-header bg-gradient-primary text-white">
                <h5 class="card-title mb-0">
                    <i class="bi bi-table"></i> Bible Verses (@Model.Count() results)
                </h5>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover table-striped mb-0 modern-table">
                        <thead class="table-dark">
                            <tr>
                                <th scope="col"><i class="bi bi-book-half"></i> Reference</th>
                                <th scope="col"><i class="bi bi-translate"></i> Language</th>
                                <th scope="col"><i class="bi bi-journal"></i> Edition</th>
                                <th scope="col"><i class="bi bi-file-text"></i> Text</th>
                                <th scope="col"><i class="bi bi-volume-up"></i> Pronunciation</th>
                                <th scope="col"><i class="bi bi-sticky"></i> Notes</th>
                                <th scope="col" class="text-center"><i class="bi bi-gear"></i> Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr class="table-row">
    <td>
        <div class="fw-bold text-primary">
            @{
                var bookNames = ViewBag.BookNames as Dictionary<int, string>;
                var bookName = bookNames?.ContainsKey(item.Book) == true 
                    ? bookNames[item.Book] 
                    : $"كتاب {item.Book}";
            }
            @bookName : @item.Chapter : @item.Verse
        </div>
        <small class="text-muted">ID: @item.BibleID</small>
    </td>
    <td>
        <span class="badge bg-info">@item.Language</span>
    </td>
    <td>
        <span class="badge bg-secondary">@item.Edition</span>
    </td>
                                    <td>
                                        <div class="text-wrap" style="max-width: 300px;">
                                            @if (!string.IsNullOrEmpty(item.Text))
                                            {
                                                @if (item.Text.Length > 100)
                                                {
                                                    <span title="@item.Text">@item.Text.Substring(0, 100)...</span>
                                                }
                                                else
                                                {
                                                    @item.Text
                                                }
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </div>
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(item.Pronunciation))
                                        {
                                            <span class="text-muted">@item.Pronunciation</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(item.Notes))
                                        {
                                            <span class="text-muted" title="@item.Notes">
                                                @(item.Notes.Length > 50 ? item.Notes.Substring(0, 50) + "..." : item.Notes)
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td class="text-center">
                                        <div class="btn-group" role="group">
                                            <a asp-action="Details" asp-route-id="@item.BibleID" 
                                               class="btn btn-sm btn-outline-primary" title="View Details">
                                                <i class="bi bi-eye"></i>
                                            </a>
                                            <a asp-action="Edit" asp-route-id="@item.BibleID" 
                                               class="btn btn-sm btn-outline-secondary" title="Edit">
                                                <i class="bi bi-pencil"></i>
                                            </a>
                                            <a asp-action="Delete" asp-route-id="@item.BibleID" 
                                               class="btn btn-sm btn-outline-danger" title="Delete"
                                               onclick="return confirm('Are you sure you want to delete this Bible verse?');">
                                                <i class="bi bi-trash"></i>
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
    else if (hasSearch || hasFilters)
    {
        <!-- No Results Found -->
        <div class="text-center py-5">
            <div class="mb-4">
                <i class="bi bi-search display-1 text-muted"></i>
            </div>
            <h3 class="text-muted">No Bible Verses Found</h3>
            <p class="text-muted">No verses match your search criteria. Try adjusting your search terms or filters.</p>
            <a href="@Url.Action("Index")" class="btn btn-outline-primary">
                <i class="bi bi-arrow-left"></i> Clear Search
            </a>
        </div>
    }
    else
    {
        <!-- Initial State -->
        <div class="text-center py-5">
            <div class="mb-4">
                <i class="bi bi-search display-1 text-primary"></i>
            </div>
            <h3 class="text-primary">Search Bible Verses</h3>
            <p class="text-muted">Enter search terms or apply filters above to find Bible verses.</p>
            <div class="mt-4">
                <div class="row justify-content-center">
                    <div class="col-md-8">
                        <div class="card bg-light">
                            <div class="card-body">
                                <h5 class="card-title">
                                    <i class="bi bi-lightbulb"></i> Search Features
                                </h5>
                                <ul class="list-unstyled mb-0">
                                    <li><i class="bi bi-check-circle text-success"></i> Search by text content in Bible verses</li>
                                    <li><i class="bi bi-check-circle text-success"></i> Filter by specific Bible books</li>
                                    <li><i class="bi bi-check-circle text-success"></i> Filter by chapter within selected books</li>
                                    <li><i class="bi bi-check-circle text-success"></i> Filter by language and edition</li>
                                    <li><i class="bi bi-check-circle text-success"></i> Combine text search with filters for precise results</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Custom Styles -->
<style>
    .bg-gradient-primary {
        background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
    }
    
    .stats-card {
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        border: none;
    }
    
    .stats-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;
    }
    
    .modern-table {
        font-size: 0.9rem;
    }
    
    .modern-table thead th {
        border: none;
        font-weight: 600;
        text-transform: uppercase;
        font-size: 0.8rem;
        letter-spacing: 0.5px;
    }
    
    .table-row:hover {
        background-color: rgba(0, 123, 255, 0.05) !important;
        transform: scale(1.01);
        transition: all 0.2s ease-in-out;
    }
    
    .badge {
        font-size: 0.75em;
        padding: 0.35em 0.65em;
    }
    
    .btn-group .btn {
        margin: 0 1px;
        border-radius: 0.375rem;
    }
    
    .display-6 {
        font-size: 2.5rem;
    }
    
    .card {
        border: none;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }
    
    .table-responsive {
        border-radius: 0 0 0.375rem 0.375rem;
    }
</style>

<!-- JavaScript for Dynamic Filtering -->
<!-- Updated JavaScript section for Index.cshtml -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Elements
        const bookSelect = document.getElementById('bookSelect');
        const languageSelect = document.getElementById('languageSelect');
        const editionSelect = document.getElementById('editionSelect');
        const chapterSelect = document.getElementById('chapterSelect');

        const editionLoading = document.getElementById('editionLoading');
        const chapterLoading = document.getElementById('chapterLoading');

        // Load available books based on language and edition
        function loadBooks() {
            const language = languageSelect.value;
            const edition = editionSelect.value;
            const currentBookValue = bookSelect.value; // Remember current selection

            let url = '/Bibles/GetAvailableBooks';
            const params = [];

            if (language) params.push(`language=${encodeURIComponent(language)}`);
            if (edition) params.push(`edition=${encodeURIComponent(edition)}`);

            if (params.length > 0) {
                url += '?' + params.join('&');
            }

            fetch(url)
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.books && data.books.length > 0) {
                        bookSelect.innerHTML = '<option value="">-- All Books --</option>';

                        data.books.forEach(book => {
                            const option = document.createElement('option');
                            option.value = book.value;
                            option.textContent = book.text;
                            if (book.value.toString() === currentBookValue) {
                                option.selected = true;
                            }
                            bookSelect.appendChild(option);
                        });

                        // If we still have a book selected after refresh, reload chapters
                        if (bookSelect.value) {
                            loadChapters();
                        }
                    } else {
                        bookSelect.innerHTML = '<option value="">-- No Books Available --</option>';
                        chapterSelect.innerHTML = '<option value="">-- All Chapters --</option>';
                        chapterSelect.disabled = false;
                    }
                })
                .catch(error => {
                    console.error('Error loading books:', error);
                    bookSelect.innerHTML = '<option value="">-- Error Loading Books --</option>';
                });
        }

        // Load chapters when book, language, or edition changes
        function loadChapters() {
            const bookNumber = bookSelect.value;
            const language = languageSelect.value;
            const edition = editionSelect.value;
            const currentChapter = chapterSelect.value; // Remember current selection

            // Only load chapters if a book is selected
            if (!bookNumber) {
                chapterSelect.innerHTML = '<option value="">-- All Chapters --</option>';
                chapterSelect.disabled = false;
                chapterLoading.classList.add('d-none');
                return;
            }

            // Show loading
            chapterLoading.classList.remove('d-none');
            chapterSelect.innerHTML = '<option value="">-- Loading... --</option>';
            chapterSelect.disabled = true;

            let url = `/Bibles/GetAvailableChapters?bookNumber=${encodeURIComponent(bookNumber)}`;
            if (language) url += `&language=${encodeURIComponent(language)}`;
            if (edition) url += `&edition=${encodeURIComponent(edition)}`;

            fetch(url)
                .then(response => response.json())
                .then(data => {
                    chapterLoading.classList.add('d-none');

                    if (data.success && data.chapters && data.chapters.length > 0) {
                        chapterSelect.innerHTML = '<option value="">-- All Chapters --</option>';
                        data.chapters.forEach(chapter => {
                            const option = document.createElement('option');
                            option.value = chapter;
                            option.textContent = `Chapter ${chapter}`;
                            // Restore the previously selected chapter if it exists in the new list
                            if (chapter.toString() === currentChapter) {
                                option.selected = true;
                            }
                            chapterSelect.appendChild(option);
                        });
                        chapterSelect.disabled = false;
                    } else {
                        chapterSelect.innerHTML = '<option value="">-- No Chapters Available --</option>';
                        chapterSelect.disabled = true;
                    }
                })
                .catch(error => {
                    console.error('Error loading chapters:', error);
                    chapterLoading.classList.add('d-none');
                    chapterSelect.innerHTML = '<option value="">-- Error Loading Chapters --</option>';
                    chapterSelect.disabled = true;
                });
        }

        // Load editions when language changes
        function loadEditions() {
            const language = languageSelect.value;
            const currentEdition = editionSelect.value; // Remember current selection

            // Show all editions if no language is selected
            if (!language) {
                editionLoading.classList.remove('d-none');
                fetch('/Bibles/GetAvailableEditions')
                    .then(response => response.json())
                    .then(data => {
                        editionLoading.classList.add('d-none');
                        if (data.success && data.editions && data.editions.length > 0) {
                            editionSelect.innerHTML = '<option value="">-- All Editions --</option>';
                            data.editions.forEach(edition => {
                                const option = document.createElement('option');
                                option.value = edition;
                                option.textContent = edition;
                                if (edition === currentEdition) {
                                    option.selected = true;
                                }
                                editionSelect.appendChild(option);
                            });
                            editionSelect.disabled = false;

                            // After edition list is updated, update books list
                            loadBooks();
                        } else {
                            editionSelect.innerHTML = '<option value="">-- No Editions Available --</option>';
                            editionSelect.disabled = true;
                        }
                    })
                    .catch(error => {
                        console.error('Error loading editions:', error);
                        editionLoading.classList.add('d-none');
                        editionSelect.innerHTML = '<option value="">-- Error Loading Editions --</option>';
                        editionSelect.disabled = true;
                    });
                return;
            }

            // Show loading
            editionLoading.classList.remove('d-none');
            editionSelect.innerHTML = '<option value="">-- Loading... --</option>';
            editionSelect.disabled = true;

            const url = `/Bibles/GetAvailableEditions?language=${encodeURIComponent(language)}`;

            fetch(url)
                .then(response => response.json())
                .then(data => {
                    editionLoading.classList.add('d-none');

                    if (data.success && data.editions && data.editions.length > 0) {
                        editionSelect.innerHTML = '<option value="">-- All Editions --</option>';
                        data.editions.forEach(edition => {
                            const option = document.createElement('option');
                            option.value = edition;
                            option.textContent = edition;
                            // Restore the previously selected edition if it exists in the new list
                            if (edition === currentEdition) {
                                option.selected = true;
                            }
                            editionSelect.appendChild(option);
                        });
                        editionSelect.disabled = false;

                        // After edition list is updated, update books list
                        loadBooks();
                    } else {
                        editionSelect.innerHTML = '<option value="">-- No Editions Available --</option>';
                        editionSelect.disabled = true;

                        // Still update books list
                        loadBooks();
                    }
                })
                .catch(error => {
                    console.error('Error loading editions:', error);
                    editionLoading.classList.add('d-none');
                    editionSelect.innerHTML = '<option value="">-- Error Loading Editions --</option>';
                    editionSelect.disabled = true;
                });
        }

        // Event listeners
        bookSelect.addEventListener('change', loadChapters);

        languageSelect.addEventListener('change', function() {
            // Language changes affect editions, which affect books, which affect chapters
            loadEditions();
        });

        editionSelect.addEventListener('change', function() {
            // Edition changes affect books, which affect chapters
            loadBooks();
        });

        // Add tooltip to truncated text
        const truncatedElements = document.querySelectorAll('[title]');
        truncatedElements.forEach(element => {
            if (element.textContent.includes('...')) {
                element.style.cursor = 'help';
            }
        });

        // Initialize filters on page load if any are pre-selected
        if (languageSelect.value) {
            // If language is selected, start the cascade from there
            loadEditions();
        } else if (editionSelect.value) {
            // If only edition is selected, load books based on it
            loadBooks();
        } else if (bookSelect.value) {
            // If only book is selected, just load chapters
            loadChapters();
        }
    });
</script>